data = {
   'python': {
       '1': """print "Hello World"ᨆprint 7ᨆprint 5 + 4ᨆprint "5 + 4"ᨆprint "5" + "4"ᨆprint 5 * 2ᨆprint 24 / 6ᨆprint 10 - 3ᨆprint 2 * 4 - 3ᨆprint 2 * (4 - 3)ᨆprint "ROAR! " * 5ᨆprint "Add a leading # to make one line be comment"ᨆprint "Comments are just for you, they will be ignored when the code runs"ᨆ""",
       '2': """a = 1ᨆb = 2ᨆprint aᨆprint a + bᨆc = 1.5ᨆprint a + b + cᨆprint 1 < 2ᨆprint 3 == 3ᨆprint 4 == 3ᨆprint 3 > 4ᨆprint 1 < 2 and 3 < 4ᨆprint 3 < 3 or 3 == 3ᨆprint 3 <= 3ᨆprint not 1 < 2ᨆs1 = "Hello"ᨆprint s1ᨆs2 = "15"ᨆprint s2 * 2ᨆprint int(s2) * 2ᨆs3 = "3.14"ᨆprint s3 * 2ᨆprint float(s3) * 2ᨆ""",
       '3': """s = "hello world"ᨆprint "hello" + "  ,  " + "" + "  !"ᨆprint len(s)ᨆprint s.capitalize()ᨆprint s.count("h")ᨆprint s.count("o")ᨆprint s.count("world")ᨆprint s.endswith("orld")ᨆprint s.endswith("ello")ᨆprint s.startswith("he")ᨆprint s.upper()ᨆprint s.lower()ᨆprint s.title()ᨆprint s.split()ᨆprint s.find("he")ᨆprint s.find("world")ᨆprint s.find("py")ᨆ""",
       '4': """name = raw_input("Enter your name")ᨆprint "Hello", nameᨆage = raw_input("Enter your age")ᨆprint "You are", age, "years old"ᨆcolor = raw_input("Enter your favorite color")ᨆprint "Your favorite color is", colorᨆnumber = raw_input("What is your favorite numberᨆ")ᨆprint "Your favorite number is", numberᨆmultiplied = int(number) * 2ᨆprint "Your favorite number doubled is", multipliedᨆ""",
       '5': """weather = "sunny"ᨆif weather == "sunny":ᨆprint "We will go on a picnic!"ᨆprint "Hooray!"ᨆimport timeᨆtime.sleep(0.5)ᨆage = int(raw_input("Enter your age:"))ᨆif age >= 13:ᨆprint "You can watch this movie"ᨆelse:ᨆprint "Sorry, you can't watch this movie"ᨆtime.sleep(0.5)ᨆscore = float(raw_input("how would you rate this movieᨆ (1ᨆ5):"))ᨆif score >= 4.5:ᨆprint "You like it very much"ᨆelif score >= 3.5:ᨆprint "You like it"ᨆelif score >= 2.5:ᨆprint "You think it is an average movie"ᨆelse:ᨆprint "You don't like it :("ᨆ""",
       '6': """shopping_list = ["milk", "apple juice", "beacon", "tomato"]ᨆprint shopping_list, "has", len(shopping_list), "items"ᨆshopping_list.append("grape")ᨆshopping_list.append("orange")ᨆprint shopping_listᨆprint shopping_list[0]ᨆprint shopping_list[2]ᨆshopping_list.extend(["eggs", "bagel"])ᨆprint shopping_listᨆshopping_list.remove("milk")ᨆprint shopping_listᨆshopping_list.remove("beacon")ᨆprint shopping_listᨆshopping_list.sort()ᨆprint "After sorted:"ᨆprint shopping_listᨆmylist = [1, 2, "apple", 3.14, "circle"]ᨆprint mylistᨆ""",
       '7': """numbers = [12, 3, 25, 36]ᨆprint numbers[0]ᨆprint numbers[1]ᨆprint numbers[2]ᨆprint numbers[3]ᨆprint "* for-loop demo:"ᨆfor index in range(len(numbers)):ᨆprint numbers[index]ᨆfor num in numbers:ᨆprint numᨆfor i in range(10):ᨆprint "Hello "ᨆprint "* while-loop demo:"ᨆi = 0ᨆwhile i < len(numbers):ᨆprint numbers[i]ᨆi = i + 1ᨆcounter = 0ᨆwhile counter < 10:ᨆprint "Hello "ᨆcounter = counter + 1ᨆprint "* break demo:"ᨆfor i in range(10):ᨆif i == 6:ᨆbreakᨆprint iᨆprint "* continue demo:"ᨆfor i in range(10):ᨆif i == 6:ᨆcontinueᨆprint iᨆ""",
       '8': """number = raw_input("Enter a number")ᨆdecimal = int(number)ᨆbinary = ""ᨆwhile decimal > 0:ᨆremainder = decimal % 2ᨆbinary = str(remainder) + binaryᨆdecimal = decimal / 2ᨆprint number, "in binary is", binaryᨆ""",
       '9': """number = raw_input("Enter a number")ᨆdecimal = int(number)ᨆhexadecimal = ""ᨆwhile decimal > 0:ᨆremainder = decimal % 16ᨆif remainder < 10:ᨆhexadecimal = str(remainder) + hexadecimalᨆelif remainder == 10:ᨆhexadecimal = "A" + hexadecimalᨆelif remainder == 11:ᨆhexadecimal = "B" + hexadecimalᨆelif remainder == 12:ᨆhexadecimal = "C" + hexadecimalᨆelif remainder == 13:ᨆhexadecimal = "D" + hexadecimalᨆelif remainder == 14:ᨆhexadecimal = "E" + hexadecimalᨆelse:ᨆhexadecimal = "F" + hexadecimalᨆdecimal = decimal / 16ᨆprint number, "in hexadecimal is", hexadecimalᨆ""",
       '10': """import timeᨆprint "Timezone:", time.tznameᨆfor i in range(5):ᨆprint time.asctime()ᨆtime.sleep(1)ᨆprint "-" * 20ᨆimport randomᨆnumbers = [1, 2, 3, 4, 5]ᨆprint random.choice(numbers)ᨆnewNumber = random.randint(10, 20)ᨆnumbers.append(newNumber)ᨆprint numbersᨆrandom.shuffle(numbers)ᨆprint numbersᨆ""",
       '11': """import randomᨆimport timeᨆx = random.randint(1, 50)ᨆchances = 10ᨆnumGuesses = 0ᨆguess = 0ᨆwhile numGuesses < chances:ᨆguess = raw_input("Guess a number between 1 and 100")ᨆguess = int(guess)ᨆif guess > 100 or guess < 1:ᨆprint guess, "is out of range"ᨆnumGuesses += 1ᨆelif guess > x:ᨆprint guess, "is too high"ᨆnumGuesses += 1ᨆelif guess < x:ᨆprint guess, "is too low"ᨆnumGuesses += 1ᨆelse:ᨆprint "Correct!"ᨆbreakᨆtime.sleep(0.5)ᨆif guess != x:ᨆprint "The correct number was", xᨆ""",
       '12': """import timeᨆchoice = ""ᨆtotal = 0.0ᨆwhile choice != "done":ᨆchoice = raw_input("burger, pizza or cookies."ᨆ+ " type 'done' when you are done")ᨆchoice = choice.lower()ᨆif choice == "burger":ᨆtotal = total + 4.50ᨆelif choice == "pizza":ᨆtotal = total + 2.0ᨆelif choice == "cookies":ᨆtotal = total + 2.50ᨆelif choice == "done":ᨆbreakᨆelse:ᨆprint "We don't have", choiceᨆtime.sleep(0.5)ᨆcontinueᨆprint "Your choice:", choiceᨆtime.sleep(0.5)ᨆprint "Your total is $" + str(total)ᨆ""",
       '13': """import timeᨆfor multiplier in range(1, 5):ᨆfor i in range(1, 10):ᨆprint i, "x", multiplier, "=", i * multiplierᨆprint "-" * 10ᨆtime.sleep(1)ᨆnumStars = int(raw_input("How many stars do you want in one lineᨆ"))ᨆnumLines = int(raw_input("How many lines do you wantᨆ"))ᨆfor i in range(numLines):ᨆfor j in range(numStars):ᨆprint "*",ᨆprint ""ᨆprint "-" * 10ᨆtime.sleep(1)ᨆnumBlocks = int(raw_input("How many star blocks do you wantᨆ"))ᨆfor k in range(numBlocks):ᨆprint "[block %s]:" % kᨆfor i in range(numLines):ᨆfor j in range(numStars):ᨆprint "*",ᨆprint ""ᨆ""",
       '14': """from random import randintᨆmyList = []ᨆfor counter in range(10):ᨆmyList.append(randint(1, 100))ᨆprint "Before sorting:"ᨆprint myListᨆiterCount = 1ᨆfor i in range(len(myList)):ᨆsmallest = iᨆfor j in range(i, len(myList)):ᨆif myList[j] < myList[smallest]:ᨆsmallest = jᨆif smallest != i:ᨆtemp = myList[i]ᨆmyList[i] = myList[smallest]ᨆmyList[smallest] = tempᨆprint "Iteration", iterCount, ":", myListᨆiterCount = iterCount + 1ᨆprint "After sorting:"ᨆprint myListᨆ""",
       '15': """from random import randintᨆmyList = []ᨆfor counter in range(10):ᨆmyList.append(randint(1, 100))ᨆprint "Before sorting:"ᨆprint myListᨆiterCount = 1ᨆfor index in range(1, len(myList)):ᨆcurrValue = myList[index]ᨆposition = indexᨆwhile position > 0 and myList[position - 1] > currValue:ᨆmyList[position] = myList[position - 1]ᨆposition = position - 1ᨆmyList[position] = currValueᨆprint "Iteration", iterCount, ":", myListᨆiterCount += 1ᨆprint "After sorting:"ᨆprint myListᨆ""",
       '16': """myDict = {ᨆ"hello": "an expression of greeting",ᨆ"world": "everything that exists anywhere"ᨆ}ᨆprint "Query - hello:", myDict["hello"]ᨆmenu = {ᨆ"milk": 3.72,ᨆ"bacon": 4.98,ᨆ"burger": 3.5ᨆ}ᨆprint "Price of bacon is", menu["bacon"]ᨆif menu.has_key("milk"):ᨆprint "We have milk"ᨆelse:ᨆprint "Sorry, we don't have milk"ᨆif "milk" in menu:ᨆprint "We have milk"ᨆprint menu.keys()ᨆprint "* Menu:"ᨆfor (key, value) in menu.items():ᨆprint key, ":", valueᨆmenu["milk"] = 3.82ᨆmenu["sausage"] = 4.94ᨆprint menuᨆmenu.pop("burger")ᨆprint menuᨆ""",
       '17': """calories = {ᨆ"apple": 95,ᨆ"banana": 105,ᨆ"pineapple": 402,ᨆ"orange": 45,ᨆ"mango": 201,ᨆ}ᨆimport timeᨆanswer = ""ᨆtotalCalories = 0ᨆwhile answer != "done":ᨆanswer = raw_input("What do you wantᨆ\\n %s \\nInput 'done' to finish" %ᨆcalories.keys())ᨆanswer = answer.lower()ᨆif answer in calories:ᨆprint "You choose", answerᨆtotalCalories += calories[answer]ᨆelif answer == "done":ᨆcontinueᨆelse:ᨆprint "Sorry, we don't have", answerᨆtime.sleep(0.2)ᨆprint "Total calories:", totalCaloriesᨆ""",
       '18': """def printInfo():ᨆprint "John"ᨆprint "Address: 10 xyz lane"ᨆprint "Favorite color: blue"ᨆprint "Favorite coding language: "ᨆprintᨆprintInfo()ᨆprintInfo()ᨆdef printInfo(name, addr, color, lang):ᨆprint nameᨆprint "Address:", addrᨆprint "Favorite color:", colorᨆprint "Favorite coding language:", langᨆprintᨆprintInfo("Bob", "11 abc Lane", "green", "Java")ᨆprintInfo("Alice", "236 meadow dr", "pink", "Scratch")ᨆdef add(a, b):ᨆreturn a + bᨆc = add(1, 2)ᨆprint "sum is:", cᨆprintᨆdef checkPlease(price, taxRate, tipsRate):ᨆtax = price * taxRateᨆtips = price * tipsRateᨆtotal = price + tax + tipsᨆreturn totalᨆprint "Your total is:", checkPlease(13.5, 0.05, 0.15)ᨆ""",
       '19': """speed = 10ᨆdef speedUp1():ᨆprint "I am going to change the speed"ᨆspeed = 20ᨆspeedUp1()ᨆprint "After calling speedUp1, current speed is:", speedᨆprintᨆdef speedUp2():ᨆglobal speedᨆprint "I declare speed is the global one"ᨆprint "I am going to really change the speed"ᨆspeed = 20ᨆspeedUp2()ᨆprint "After calling speedUp2, current speed is:", speedᨆ""",
       '20': """def fibonacci(num):ᨆif num == 0:ᨆreturn 0ᨆif num == 1:ᨆreturn 1ᨆreturn fibonacci(num-2) + fibonacci(num-1)ᨆfor i in range(10):ᨆprint fibonacci(i),ᨆprintᨆdef power(base, exp):ᨆif exp == 0:ᨆreturn 1ᨆreturn base * power(base, exp-1)ᨆprint "2^5 is:", power(2, 5)ᨆprint "3^2 is:", power(3, 2)ᨆprint "4^5 is:", power(4, 5)ᨆ""",
       '21': """import mathᨆclass Circle:ᨆdef __init__(self, radius):ᨆself.radius = radiusᨆdef circumference(self):ᨆreturn 2 * math.pi * self.radiusᨆdef area(self):ᨆreturn math.pi * self.radius * self.radiusᨆc1 = Circle(1.2)ᨆprint "Circle c1"ᨆprint "- radius:", c1.radiusᨆprint "- circumference:", c1.circumference()ᨆprint "- area:", c1.area()ᨆc2 = Circle(2.5)ᨆprint "Circle c2"ᨆprint "- radius:", c2.radiusᨆprint "- circumference:", c2.circumference()ᨆprint "- area:", c2.area()ᨆ""",
       '22': """class Person:ᨆdef __init__(self, name, birthyear):ᨆself.name = nameᨆself.birthyear = birthyearᨆdef printInfo(self):ᨆprint "Name:", self.nameᨆprint "Year of birth:", self.birthyearᨆclass Student(Person):ᨆdef __init__(self, name, birthyear, school):ᨆPerson.__init__(self, name, birthyear)ᨆself.school = schoolᨆdef printInfo(self):ᨆPerson.printInfo(self)ᨆprint "School:", self.schoolᨆclass CollegeStudent(Student):ᨆdef __init__(self, name, birthyear, school, major):ᨆStudent.__init__(self, name, birthyear, school)ᨆself.major = majorᨆdef printInfo(self):ᨆStudent.printInfo(self)ᨆprint "Major:", self.majorᨆstudent1 = Student("Alice", 2000, "Meadow High School")ᨆstudent1.printInfo()ᨆprint "-" * 10ᨆstudent2 = CollegeStudent("Bob", 1996, "MIT", "Computer Science")ᨆstudent2.printInfo()ᨆ""",
       '23': """from turtle import Turtleᨆt = Turtle()ᨆt.setposition(-200, 200)ᨆt.forward(100)ᨆt.right(90)ᨆt.forward(80)ᨆt.circle(40)ᨆt.color("red")ᨆt.circle(40, 180)ᨆt.shape("turtle")ᨆt.stamp()ᨆt.forward(100)ᨆt.setposition(0, 0)ᨆt.goto(50, 50)ᨆt.goto(100, 0)ᨆt.goto(0, 0)ᨆt.goto(0, -100)ᨆt.goto(100, -100)ᨆt.goto(100, 0)ᨆt.setposition(40, -100)ᨆt.goto(40, -50)ᨆt.goto(60, -50)ᨆt.goto(60, -100)ᨆt.color("green")ᨆt.setposition(50, -90)ᨆ""",
       '24': """from turtle import Turtleᨆfrom random import randintᨆt = Turtle()ᨆfor counter in range(4):ᨆt.forward(40)ᨆt.right(90)ᨆt.setposition(-100, -100)ᨆfor counter in range(50):ᨆt.color(0, randint(0, 255), randint(0, 255))ᨆt.forward(100)ᨆt.right(115)ᨆt.setposition(80, 120)ᨆfor counter in range(50):ᨆt.color(randint(0, 255), randint(0, 255), randint(0, 255))ᨆt.forward(90)ᨆt.right(82)ᨆ""",
       '25': """from turtle import Turtleᨆt = Turtle()ᨆdef hexagon(size):ᨆfor i in range(6):ᨆt.forward(size)ᨆt.right(60)ᨆt.setposition(-150, 150)ᨆhexagon(40)ᨆt.setposition(150, 150)ᨆhexagon(20)ᨆt.setposition(-150, -150)ᨆhexagon(50)ᨆt.setposition(0, 0)ᨆfor i in range(6):ᨆhexagon(30)ᨆt.forward(30)ᨆt.left(60)ᨆ""",
       '26': """from turtle import Turtleᨆt = Turtle()ᨆt.begin_fill()ᨆfor counter in range(4):ᨆt.forward(80)ᨆt.right(90)ᨆt.end_fill()ᨆt.setposition(-150, 150)ᨆt.color("orange")ᨆt.begin_fill()ᨆfor counter in range(6):ᨆt.forward(80)ᨆt.right(60)ᨆt.end_fill()ᨆt.setposition(-150, -100)ᨆt.color("blue")ᨆt.begin_fill()ᨆfor i in range(12):ᨆt.forward(40)ᨆt.right(30)ᨆt.end_fill()ᨆt.setposition(150, 100)ᨆt.color("#339960")ᨆt.begin_fill()ᨆt.circle(40)ᨆt.end_fill()ᨆ""",
       '27': """from turtle import Turtleᨆt = Turtle()ᨆt.width(1)ᨆt.speed(10)ᨆfor j in range(3):ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆt.penup()ᨆt.back(60)ᨆt.left(90)ᨆt.forward(20)ᨆt.right(90)ᨆt.pendown()ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆt.color("blue")ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆt.color("black")ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆt.penup()ᨆt.back(60)ᨆt.left(90)ᨆt.forward(20)ᨆt.right(90)ᨆt.pendown()ᨆfor j in range(3):ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆ""",
       '28': """from turtle import Turtleᨆt = Turtle()ᨆt.width(1)ᨆt.speed(10)ᨆdef square(color):ᨆt.color(color)ᨆt.begin_fill()ᨆfor i in range(4):ᨆt.forward(20)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(20)ᨆdef nextRow(numSquares):ᨆt.up()ᨆt.back(numSquares * 20)ᨆt.left(90)ᨆt.forward(20)ᨆt.right(90)ᨆt.down()ᨆfor j in range(3):ᨆsquare("black")ᨆnextRow(3)ᨆsquare("black")ᨆsquare("blue")ᨆsquare("black")ᨆnextRow(3)ᨆfor j in range(3):ᨆsquare("black")ᨆ""",
       '29': """from turtle import Turtleᨆt = Turtle()ᨆt.width(1)ᨆt.speed(10)ᨆside = 20ᨆwidth = 3ᨆdef row(colors, numbers):ᨆfor i in range(len(colors)):ᨆt.color(colors[i])ᨆfor j in range(numbers[i]):ᨆt.begin_fill()ᨆfor k in range(4):ᨆt.forward(side)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(side)ᨆt.up()ᨆt.back(width * side)ᨆt.left(90)ᨆt.forward(side)ᨆt.right(90)ᨆt.down()ᨆcolors = ["black"]ᨆnumbers = [3]ᨆrow(colors, numbers)ᨆcolors = ["black", "blue", "black"]ᨆnumbers = [1, 1, 1]ᨆrow(colors, numbers)ᨆcolors = ["black"]ᨆnumbers = [3]ᨆrow(colors, numbers)ᨆ""",
       '30': """from turtle import Turtleᨆt = Turtle()ᨆt.width(1)ᨆt.speed(10)ᨆside = 20ᨆwidth = 9ᨆheight = 9ᨆwhite, black, red, darkred = 'white', 'black', 'red', 'darkred'ᨆt.setposition(-(width * (side/2)), height * (side/2))ᨆdef row(pixels):ᨆfor (color, count) in pixels:ᨆt.color(color)ᨆfor j in range(count):ᨆt.begin_fill()ᨆfor k in range(4):ᨆt.forward(side)ᨆt.right(90)ᨆt.end_fill()ᨆt.forward(side)ᨆt.penup()ᨆt.back(width * side)ᨆt.right(90)ᨆt.forward(side)ᨆt.left(90)ᨆt.pendown()ᨆrow([(white, 2), (black, 2), (white, 1), (black, 2), (white, 2)])ᨆrow([(white, 1), (black, 1), (red, 2), (black, 1),ᨆ(red, 2), (black, 1), (white, 1)])ᨆrow([(black, 1), (red, 1), (white, 1), (red, 5), (black, 1)])ᨆrow([(black, 1), (red, 7), (black, 1)])ᨆrow([(black, 1), (darkred, 1), (red, 5), (darkred, 1), (black, 1)])ᨆrow([(white, 1), (black, 1), (darkred, 1),ᨆ(red, 3), (darkred, 1), (black, 1), (white, 1)])ᨆrow([(white, 2), (black, 1), (darkred, 1),ᨆ(red, 1), (darkred, 1), (black, 1), (white, 2)])ᨆrow([(white, 3), (black, 1), (darkred, 1), (black, 1), (white, 3)])ᨆrow([(white, 4), (black, 1), (white, 4)])ᨆ""",
       '31': """from processing import *ᨆdef setup():ᨆsize(400, 400)ᨆdef draw():ᨆbackground(0, 0, 0)ᨆstroke(255)ᨆline(0, 0, 50, 200)ᨆfill(255, 0, 0)ᨆellipse(180, 80, 150, 100)ᨆnoStroke()ᨆfill(0, 0, 255)ᨆellipse(180, 200, 150, 100)ᨆfill(255, 160, 0)ᨆrect(50, 300, 100, 70)ᨆfill(0, 200, 0)ᨆtriangle(300, 200, 280, 380, 350, 350)ᨆrun()ᨆ""",
       '32': """from processing import *ᨆimport mathᨆwidth = 520ᨆheight = 360ᨆradius = 16ᨆtheta = 0ᨆdx = 0ᨆsteps = width / radius + 1ᨆdef setup():ᨆglobal dxᨆsize(width, height)ᨆdx = float(TWO_PI / width) * radiusᨆcolorMode(HSB)ᨆdef draw():ᨆglobal thetaᨆbackground(0, 0, 0)ᨆtheta += 0.05ᨆx = thetaᨆhue = 0ᨆfor i in range(steps):ᨆy = height / 2 + math.sin(x) * 70ᨆx += dxᨆfill(hue, 255, 240)ᨆellipse(i * radius, y, radius, radius)ᨆhue += 5ᨆrun()ᨆ""",
       '33': """from processing import *ᨆfrom random import randintᨆrotating_sun = 0ᨆrotating_earth = 0ᨆrotating_moon = 0ᨆcenter_x = 250ᨆcenter_y = 250ᨆstar_count = 150ᨆstars = []ᨆdef setup():ᨆsize(540, 500)ᨆfor i in range(star_count):ᨆx = randint(10, 530)ᨆy = randint(10, 490)ᨆwidth = randint(2, 8)ᨆheight = randint(2, 8)ᨆcolor = randint(10, 100)ᨆstars.append({ᨆ"x": x,ᨆ"y": y,ᨆ"width": width,ᨆ"height": height,ᨆ"color": colorᨆ})ᨆdef draw():ᨆglobal rotating_sun, rotating_earth, rotating_moonᨆbackground(0, 0, 0)ᨆfor star in stars:ᨆfill(star["color"])ᨆellipse(star["x"], star["y"], star["width"], star["height"])ᨆnoFill()ᨆstroke(60, 60, 60)ᨆarc(center_x, center_y, 140, 140, 0, 2*PI)ᨆrotating_sun += -0.0001ᨆrotating_earth += -0.005ᨆrotating_moon += -0.06ᨆnoStroke()ᨆtranslate(center_x, center_y)ᨆrotate(rotating_sun)ᨆfill(250, 0, 0)ᨆellipse(0, 0, 30, 30)ᨆrotate(rotating_earth)ᨆfill(100, 200, 250)ᨆellipse(70, 0, 13, 13)ᨆtranslate(70, 0)ᨆrotate(rotating_moon)ᨆfill(250, 250, 0)ᨆellipse(10, 0, 4, 4)ᨆrun()ᨆ""",
       '34': """from processing import *ᨆfont = Noneᨆdef setup():ᨆglobal fontᨆsize(500, 400)ᨆfont = createFont("Comic Sans MS", 30)ᨆdef draw():ᨆbackground(0)ᨆtextFont(font)ᨆfill(0, 240, 255)ᨆtextSize(40)ᨆtext("My Clock", 140, 120)ᨆtime = "%02d/%02d/%02d %02d:%02d:%02d" % \ᨆ(month(), day(), year(), hour(), minute(), second())ᨆtextSize(35)ᨆfill(0, 255, 0)ᨆtext(time, 80, 220)ᨆrun()ᨆ""",
       '35': """from processing import *ᨆfrom math import sinᨆfrom random import randintᨆballx = 30ᨆbally = 30ᨆrectx = 30ᨆrecty = 350ᨆradius = 30ᨆdelay = 16ᨆr = 100ᨆg = 100ᨆb = 100ᨆdef setup():ᨆsize(540, 400)ᨆdef draw():ᨆglobal ballx, bally, rectx, recty, radiusᨆbackground(r, g, b)ᨆstrokeWeight(10)ᨆstroke(255)ᨆfill(0, 121, 200)ᨆballx += float(mouse.x - ballx) / delayᨆbally += float(mouse.y - bally) / delayᨆradius = radius + sin(environment.frameCount / 4)ᨆellipse(ballx, bally, radius, radius)ᨆstrokeWeight(2)ᨆfill(240, 150, 0)ᨆrect(rectx, recty, 150, 30)ᨆdef mousePressed():ᨆglobal r, g, bᨆr = randint(0, 150)ᨆg = randint(0, 150)ᨆb = randint(0, 150)ᨆdef keyPressed():ᨆglobal rectx, rectyᨆif keyboard.keyCode == UP:ᨆrecty -= 10ᨆelif keyboard.keyCode == DOWN:ᨆrecty += 10ᨆelif keyboard.keyCode == LEFT:ᨆrectx -= 10ᨆelif keyboard.keyCode == RIGHT:ᨆrectx += 10ᨆrun()ᨆ""",
       '36': """from processing import *ᨆangle = 0ᨆnumLines = 20ᨆwidth = 400ᨆheight = 400ᨆdef setup():ᨆsize(width, height)ᨆcolorMode(HSB)ᨆdef draw():ᨆglobal angleᨆhue = 0ᨆbackground(25)ᨆstrokeWeight(3)ᨆtranslate(200, 200)ᨆfor i in range(numLines):ᨆhue += iᨆstroke(hue, 255, 200)ᨆrotate(PI / 30)ᨆline(mouse.x-width/2, mouse.y-height/2, 0, -60)ᨆangle += 0.0001ᨆrotate(angle)ᨆrun()ᨆ""",
       '37': """from processing import *ᨆfrom random import choiceᨆbunny = Noneᨆturtle = Noneᨆbunny_x = 10ᨆturtle_x = 10ᨆdef setup():ᨆglobal bunny, turtleᨆsize(500, 400)ᨆbunny = loadImage("https://speedcode.oyohub.com/img/bunny.png")ᨆturtle = loadImage("https://speedcode.oyohub.com/img/turtle.png")ᨆdef draw():ᨆbackground(255)ᨆfill(20)ᨆtext("Use A and D key to move the turtle", 10, 20)ᨆtext("Use Left and Right arrow key to move the bunny", 230, 20)ᨆimage(turtle, turtle_x, 100, 60, 40)ᨆimage(bunny, bunny_x, 200, 60, 80)ᨆnoStroke()ᨆfill(0, 200, 100)ᨆrect(10, 140, 500, 10)ᨆfill(240, 200, 0)ᨆrect(10, 280, 500, 10)ᨆtextSize(30)ᨆfill(0, 200, 100)ᨆif turtle_x > 440:ᨆtext("Turtle won!", 170, 70)ᨆexitp()ᨆif bunny_x > 440:ᨆtext("Bunny won!", 170, 70)ᨆexitp()ᨆdef keyPressed():ᨆglobal turtle_x, bunny_xᨆif keyboard.key == "a":ᨆturtle_x -= 10ᨆelif keyboard.key == "d":ᨆturtle_x += 10ᨆif keyboard.keyCode == LEFT:ᨆbunny_x -= 30ᨆelif keyboard.keyCode == RIGHT:ᨆif choice([0, 1, 2]) == 0:ᨆbunny_x -= 30ᨆelse:ᨆbunny_x += 30ᨆrun()ᨆ""",
       '38': """from processing import *ᨆcounter = 0ᨆcurrFrame = 0ᨆx = 300ᨆy = 10ᨆspeedY = 0ᨆframes = []ᨆdef setup():ᨆglobal p1, p2, p3, framesᨆsize(540, 400)ᨆbackground(0, 102, 0)ᨆstepLeft = loadImage("https://speedcode.oyohub.com/img/frame1.png")ᨆstand = loadImage("https://speedcode.oyohub.com/img/frame2.png")ᨆstepRight = loadImage("https://speedcode.oyohub.com/img/frame3.png")ᨆframes = [stepLeft, stand, stepRight, stand]ᨆdef draw():ᨆglobal counter, currFrame, yᨆbackground(0, 102, 0)ᨆfill(255)ᨆtext("Use up and down arrow key to move the character", 10, 20)ᨆnoStroke()ᨆrect(290, 0, 40, 400)ᨆif counter == 10:ᨆcurrFrame = (currFrame + 1) % 4ᨆcounter = 0ᨆcounter += 1ᨆif speedY:ᨆy += speedYᨆimage(frames[currFrame], x, y, 20, 30)ᨆelse:ᨆstand = frames[1]ᨆimage(stand, x, y, 20, 30)ᨆdef keyPressed():ᨆglobal speedYᨆif keyboard.keyCode == UP:ᨆspeedY = -1ᨆif keyboard.keyCode == DOWN:ᨆspeedY = 1ᨆdef keyReleased():ᨆglobal speedYᨆif keyboard.keyCode in [UP, DOWN]:ᨆspeedY = 0ᨆrun()ᨆ""",
       '39': """from processing import *ᨆimport randomᨆcat = NoneᨆcatSoundList = [ᨆ"meow meow ᨆ",ᨆ"where is my fish cake",ᨆ"pur pur pur ...",ᨆ]ᨆclass Cat:ᨆdef __init__(self, x, y, imgURL, soundList):ᨆself.x = xᨆself.y = yᨆself.currSound = ""ᨆself.img = loadImage(imgURL)ᨆself.soundList = soundListᨆdef moveLeft(self):ᨆself.x -= 10ᨆdef moveRight(self):ᨆself.x += 10ᨆdef startSpeaking(self):ᨆif not self.currSound:ᨆself.currSound = random.choice(self.soundList)ᨆdef endSpeaking(self):ᨆself.currSound = ""ᨆdef draw(self):ᨆimage(self.img, self.x, self.y)ᨆdef speak(self):ᨆif self.currSound:ᨆfill(10)ᨆtextSize(20)ᨆtext(self.currSound, self.x, self.y - 10)ᨆdef setup():ᨆglobal catᨆsize(540, 400)ᨆbackground(255)ᨆcat = Cat(200, 250,ᨆ"https://speedcode.oyohub.com/img/cat.png",ᨆcatSoundList)ᨆdef draw():ᨆbackground(255)ᨆfill(0)ᨆtext("Press space to speak", 200, 20)ᨆcat.draw()ᨆcat.speak()ᨆdef keyPressed():ᨆif keyboard.keyCode == 32:ᨆcat.startSpeaking()ᨆdef keyReleased():ᨆif keyboard.keyCode == 32:ᨆcat.endSpeaking()ᨆrun()ᨆ""",
       '40': """from processing import *ᨆwidth = 540ᨆheight = 450ᨆball = {ᨆ"x": 50,ᨆ"y": 50,ᨆ"radius": 10,ᨆ"vel_x": 20,ᨆ"vel_y": 20ᨆ}ᨆr = 0ᨆg = 100ᨆb = 200ᨆrinc = 2ᨆginc = 3ᨆbinc = 1ᨆdef setup():ᨆsize(width, height)ᨆbackground(0, 0, 0)ᨆdef draw():ᨆfill(r, g, b)ᨆellipse(ball["x"], ball["y"], 2*ball["radius"], 2*ball["radius"])ᨆmoveBall()ᨆchangeBallColor()ᨆdef moveBall():ᨆball["x"] += ball["vel_x"]ᨆball["y"] += ball["vel_y"]ᨆif ball["x"] + ball["radius"] >= width or \ᨆball["x"] - ball["radius"] <= 0:ᨆball["vel_x"] = -ball["vel_x"]ᨆif ball["y"] + ball["radius"] >= height or \ᨆball["y"] - ball["radius"] <= 0:ᨆball["vel_y"] = -ball["vel_y"]ᨆdef changeBallColor():ᨆglobal r, g, b, rinc, ginc, bincᨆr += rincᨆg += gincᨆb += bincᨆif r >= 255 or r <= 0:ᨆrinc = -rincᨆif g >= 255 or g <= 0:ᨆginc = -gincᨆif b >= 255 or b <= 0:ᨆbinc = -bincᨆrun()ᨆ"""
   },
 
   'html': {
       '1':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Boilerplate</title>ᨆ</head>ᨆ<body>ᨆHello world! A HTML tag is like a container. An opening tag starts with aᨆpointy bracket followed by a tag name and a closing tag starts with a pointy bracket and a forward slash followed by the tag name.ᨆ</body>ᨆ</html>ᨆ""",
       '2':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Heading Tags</title>ᨆ</head>ᨆ<body>ᨆ<h1>Heading 1</h1>ᨆ<h2>Heading 2</h2>ᨆ<h3>Heading 3</h3>ᨆ<h4>Heading 4</h4>ᨆ<h5>Heading 5</h5>ᨆ<h6>Heading 6</h6>ᨆ</body>ᨆ</html>""",
       '3':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Paragraph Tag</title>ᨆ</head>ᨆ<body>ᨆ<h2>Paragraph - p tag</h2>ᨆ<p>ᨆThe "p" tag is used for paragraphs; we put paragraphs inside it.ᨆ</p>ᨆ<p>ᨆHere is another paragraph.ᨆ</p>ᨆ</body>ᨆ</html>""",
       '4':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Link Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>Heading</h1>ᨆ<p>This is a paragraph.</p>ᨆ<a href="https://oyoclass.com">OYOclass</a>ᨆ<p>ᨆ<a href="https://youtube.com" target="_blank">ᨆClick me to open Youtube in a new windowᨆ</a>ᨆ</p>ᨆ</body>ᨆ</html>""",
       '5':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Image Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>HTML - image tag</h1>ᨆ<p>ᨆ<img src="https://speedcode.oyohub.com/img/html.png" />ᨆ</p>ᨆ<p>ᨆ<img width="80px" src="https://speedcode.oyohub.com/img/html.png" />ᨆ</p>ᨆ<p>ᨆView more examples atᨆ<a href="http://www.w3schools.com/html/html_images.asp">W3schools</a>ᨆ</p>ᨆ</body>ᨆ</html>""",
       '6':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Line Break Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>br - Line Break Tag</h1>ᨆ<p>ᨆWe have some text on this line,ᨆsome more text on this line,ᨆbut when we preview this web page,ᨆall of these text are on one line.ᨆ</p>ᨆ<p>ᨆThis is because the browser will ignore the text line-break in HTML code.ᨆIf we want to create a line-break, we need to explicitly add a line-break tag:ᨆ<br/>ᨆNow this line will appear on another line. We can also insertᨆmultiple line break tags.ᨆ<br/>ᨆ<br/>ᨆThis line will be shown on the next next line.ᨆ</p>ᨆ</body>ᨆ</html>""",
       '7':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Unordered List Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>ul - Unordered list tag</h1>ᨆ<p>ᨆ"ul" stands for "unordered list". Inside this tagᨆwe use the "li" tag, which stands for "list item".ᨆ</p>ᨆ<h2>My shopping list</h2>ᨆ<ul>ᨆ<li>Apple juice</li>ᨆ<li>Avocado</li>ᨆ<li>Summer sausage</li>ᨆ<li>2% fat milk</li>ᨆ</ul>ᨆ</body>ᨆ</html>""",
       '8':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Ordered List Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>ol - Ordered list tag</h1>ᨆ<p>ᨆ"ol" stands for "ordered list". Within these tagsᨆwe use the "li" tag, which stands for "list item".ᨆ</p>ᨆ<h2>HTML learning plan</h2>ᨆ<ol>ᨆ<li>Learn commonly used tags</li>ᨆ<li>Use the web editor to practice</li>ᨆ<li>Complete web challenges and earn badges</li>ᨆ<li>Set up my own website</li>ᨆ</ol>ᨆ</body>ᨆ</html>""",
       '9':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Text Decoration</title>ᨆ</head>ᨆ<body>ᨆ<h1>b, i, u, mark tags</h1>ᨆ<p>ᨆText inside the <b>b tag</b> will turn <b>bold</b>, <br/>ᨆtext inside the <i>i tag</i> will turn <i>italic</i>, <br/>ᨆtext inside the <u>u tag</u> will be <u>underlined</u>, <br/>ᨆtext inside the <mark>mark tag</mark> will be <mark>highlighted</mark>.ᨆ</p>ᨆ</body>ᨆ</html>""",
       '10':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Audio Tag</title>ᨆ</head>ᨆ<body>ᨆ<h1>audio - Play some sound</h1>ᨆ<p>ᨆThe audio tag adds sound, such as music or other audio streams.ᨆ</p>ᨆ<p>ᨆClick the play button to listen to the following audio: <br/>ᨆ<audio controls>ᨆ<source src="http://www.soundjay.com/ambient/spring-weather-1.mp3" type="audio/mpeg">ᨆ</audio>ᨆ</p>ᨆ<p>ᨆYou can autoplay a sound file when the page is loaded.ᨆCheck the autoplay attribute atᨆ<a href="http://www.w3schools.com/tags/tag_audio.asp" target="_blank">W3schools</a>ᨆ</p>ᨆ</body>ᨆ</html>""",
       '11':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Embed Scratch Games</title>ᨆ</head>ᨆ<body>ᨆ<h1>iframe tag - embed resources from other websites</h1>ᨆ<p>ᨆTo embed a Scratch game, make sure you have shared your project first.ᨆGo to the project page, click on Embed, copy the code in the textbox,ᨆthen paste into your editor.ᨆ</p>ᨆ<p>ᨆYour code will look something like below:ᨆ</p>ᨆ<iframe allowtransparency="true" width="485" height="402"ᨆsrc="//scratch.mit.edu/projects/embed/117479569/ᨆautostart=false"ᨆframeborder="0" allowfullscreen></iframe>ᨆ</body>ᨆ</html>""",
       '12':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Embed Videos</title>ᨆ</head>ᨆ<body>ᨆ<h1>iframe tag - Embed resources from other websites</h1>ᨆ<p>ᨆTo embed a video from YouTube, go to the video page, click on Share -> Embed,ᨆcopy the code in the textbox, then paste into your editor.ᨆ</p>ᨆ<iframe width="530" height="315" src="https://www.youtube.com/embed/Pcpha8fwZFw"ᨆframeborder="0" allowfullscreen></iframe>ᨆ<iframe src="https://player.vimeo.com/video/94502406" width="530" height="360"ᨆframeborder="0" allowfullscreen></iframe>ᨆ</body>ᨆ</html>""",
       '13':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>How to Add CSS</title>ᨆ<link rel="stylesheet" type="text/css" href="style.css">ᨆ<style>ᨆh1 {color: red}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>CSS</h1>ᨆ<p>ᨆCSS stands for "Cascading Style Sheets".ᨆIt is a language that describes the style of an HTML document.ᨆ</p>ᨆ<p style=""></p>ᨆ</body>ᨆ</html>""",
       '14':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>CSS in style tag</title>ᨆ<style>ᨆbody {ᨆbackground-color: green;ᨆ}ᨆh1 {ᨆcolor: pink;ᨆ}ᨆp {ᨆcolor: white;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>CSS in style tag</h1>ᨆ<p>Text inside the p tag becomes white because of the defined CSS above.</p>ᨆ</body>ᨆ</html>""",
       '15':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>More CSS in style Tag</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆp {ᨆcolor: blue;ᨆfont-weight: bold;ᨆfont-size: 18px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>More CSS in style tag</h1>ᨆ<p>Text inside this p tag will turn blue, bold and be 18px large.</p>ᨆ</body>ᨆ</html>""",
       '16':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Overriding CSS Styles</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆh1 {ᨆcolor: #2a90b8;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Heading</h1>ᨆ<p>ᨆ#ddd, #555 and #2a90b8 defined above are all color codes.ᨆWant to find a specific color codeᨆ Learn more at:ᨆ<a href="http://www.w3schools.com/colors/colors_picker.asp" target="_blank">ᨆHTML Color Pickerᨆ</a>ᨆ</p>ᨆ</body>ᨆ</html>""",
       '17':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Pseudo Classes</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆh1 {ᨆcolor: #2a90b8;ᨆ}ᨆa:link, a:visited {ᨆcolor: #393;ᨆ}ᨆa:hover, a:active {ᨆcolor: #fff;ᨆbackground-color: #393;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Pseudo Classes</h1>ᨆ<p>This is a paragraph</p>ᨆ<a href="https://oyoclass.com/" target="_blank">OYOclass</a>ᨆ</body>ᨆ</html>""",
       '18':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Pseudo Elements</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆ}ᨆh1::before {ᨆcontent: url(https://speedcode.oyohub.com/img/smiley.png);ᨆ}ᨆp::first-letter {ᨆfont-size: 30px;ᨆ}ᨆp::first-line {ᨆcolor: #393;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Heading</h1>ᨆ<p>ᨆThe first line of this paragraph will turn greenᨆaccording to the CSS defined above. The other lines will remainᨆblack, which is the default font color.ᨆ</p>ᨆ<p>ᨆCheck more pseudo elements properties at:ᨆ<a href="http://www.w3schools.com/css/css_pseudo_elements.asp" target="_blank">ᨆW3schoolsᨆ</a>ᨆ</p>ᨆ</body>ᨆ</html>""",
       '19':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Border, Margin and Padding</title>ᨆ<style>ᨆbody {ᨆbackground: #eee;ᨆcolor: #555;ᨆ}ᨆh1 {ᨆcolor: #2a90b8;ᨆ}ᨆimg {ᨆborder: 5px solid #333;ᨆmargin: 15px;ᨆpadding: 25px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Border, Margin and Padding</h1>ᨆ<p>ᨆCheck out my bordered image:ᨆ<br/>ᨆ<img width="150px" src="https://speedcode.oyohub.com/img/html.png" />ᨆ</p>ᨆ</body>ᨆ</html>""",
       '20':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>CSS Reference</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆh1 {ᨆcolor: #2a90b8;ᨆtext-transform: uppercase;ᨆ}ᨆimg {ᨆborder: 5px solid #333;ᨆborder-radius: 10px;ᨆmargin: 15px;ᨆpadding: 25px;ᨆbackground-color: #efefef;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>CSS Reference</h1>ᨆ<p>ᨆYou now know a few CSS properties. Want to know moreᨆᨆCheck the CSS reference at:ᨆ<a href="http://www.w3schools.com/cssref/default.asp" target="_blank">ᨆW3schoolsᨆ</a>ᨆ</p>ᨆ<p>ᨆ<img width="150px" src="https://speedcode.oyohub.com/img/html.png" />ᨆ</p>ᨆ</body>ᨆ</html>""",
       '21':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Box Model</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆ}ᨆp {ᨆcolor: #fff;ᨆbackground-color: #828282;ᨆtext-align: center;ᨆpadding: 10px;ᨆborder: 5px dashed #f90;ᨆmargin: 15px;ᨆ}ᨆh1 {ᨆcolor: #ffff98;ᨆbackground-color: #828282;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Heading</h1>ᨆ<p>Paragraph</p>ᨆ<p>ᨆCheck the image below for an explanation of the box model:ᨆ<br/><br/>ᨆ<img width="400px" src="https://speedcode.oyohub.com/img/boxmodel.png" />ᨆ</p>ᨆ</body>ᨆ</html>""",
       '22':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Block and Inline</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆp {ᨆcolor: #fff;ᨆbackground-color: #828282;ᨆ}ᨆh1 {ᨆcolor: #ffff98;ᨆbackground-color: #828282;ᨆ}ᨆspan {ᨆbackground: #cf9;ᨆ}ᨆa {ᨆbackground: #ff9;ᨆmargin-top: 15px;ᨆdisplay: block;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Heading</h1>ᨆ<p>Paragraph</p>ᨆ<span>Span1</span>ᨆ<span>Span2</span>ᨆ<a href="https://oyoclass.com/" target="_blank">OYOclass</a>ᨆ</body>ᨆ</html>""",
       '23':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Float</title>ᨆ<style>ᨆp {ᨆwidth: 300px;ᨆ}ᨆimg {ᨆpadding: 5px;ᨆmargin: 5px 10px;ᨆborder: 2px solid black;ᨆfloat: left;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<img src="https://speedcode.oyohub.com/img/html.png" width="100px">ᨆ<p>ᨆThis is a paragraph. All of the text will flow aroundᨆthe image since it has a float property. It will continueᨆto flow around the image until text starts to spill ontoᨆthe next line. Text wraps around the image with the floatᨆproperty in this example.ᨆ</p>ᨆ</body>ᨆ</html>""",
       '24':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Div Tag</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>div - Division tag</h1>ᨆ<div style="background-color: #ffe7a3;">ᨆThis is a div. Div elements are blocks by default.ᨆ</div>ᨆ<div style="background-color: #d0ffa3;">ᨆYou can tell they are block elements because a second div is forced onto the next line.ᨆ</div>ᨆ<div style="background-color: #a3eaff;">ᨆAlso, the background colors identify the scope of each div element.ᨆ</div>ᨆ</body>ᨆ</html>""",
       '25':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Nested Div</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆpadding: 15px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div style="background-color: #ffe7a3;">ᨆ<div style="background-color: #d0ffa3;">ᨆ<div style="background-color: #a3eaff;">ᨆDivs can be nested inside of each other.ᨆ</div>ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '26':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Rows</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div>ᨆ<div style="background-color: #ffe7a3; padding: 15px;">ᨆThis is row 1.ᨆ</div>ᨆ<div style="background-color: #d0ffa3; padding: 15px;">ᨆThis is row 2.ᨆ</div>ᨆ<div style="background-color: #a3eaff; padding: 15px;">ᨆThis is row 3.ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '27':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Columns</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div>ᨆ<div style="background-color:#ffe7a3; padding:15px; width:25%; display:inline-block;">ᨆThis is column 1.ᨆ</div>ᨆ<div style="background-color:#d0ffa3; padding:15px; width:25%; display:inline-block;">ᨆThis is column 2.ᨆ</div>ᨆ<div style="background-color:#a3eaff; padding:15px; width:25%; display:inline-block;">ᨆThis is column 3.ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '28':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Rows and Columns</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div>ᨆ<div>ᨆ<div style="background-color: #ffe7a3; padding: 15px; width: 25%; display: inline-block;">ᨆThis is row 1 column 1.ᨆ</div>ᨆ<div style="background-color: #d0ffa3; padding: 15px; width: 25%; display: inline-block;">ᨆThis is row 1 column 2.ᨆ</div>ᨆ<div style="background-color: #a3eaff; padding: 15px; width: 25%; display: inline-block;">ᨆThis is row 1 column 3.ᨆ</div>ᨆ</div>ᨆ<div style="background-color: #ffe7a3; padding: 15px;">ᨆThis is row 2 column 1.ᨆ</div>ᨆ<div>ᨆ<div style="background-color: #d0ffa3; padding: 15px; width: 40%; display: inline-block;">ᨆThis is row 3 column 1.ᨆ</div>ᨆ<div style="background-color: #a3eaff; padding: 15px; width: 40%; display: inline-block;">ᨆThis is row 3 column 2.ᨆ</div>ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '29':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>CSS with class</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ.yellow {ᨆbackground-color: #ffe7a3;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="yellow">ᨆThis div has a yellow background.ᨆ</div>ᨆ<div class="yellow">ᨆThis too!ᨆ</div>ᨆ</body>ᨆ</html>""",
       '30':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>CSS with ID</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆ#container {ᨆbackground-color: #fff;ᨆpadding: 5px;ᨆwidth: 520px;ᨆ}ᨆ.green {ᨆbackground-color: #d0ffa3;ᨆpadding: 15px;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div id="container">ᨆ<div class="green">ᨆThis div is inside a container div!ᨆ</div>ᨆ<div class="green">ᨆThis div is also inside the container div!ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '31':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Naming Scheme</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆwidth: 500px;ᨆpadding: 15px;ᨆmargin-bottom: 15px;ᨆ}ᨆ.warning {ᨆbackground-color: #ffabab;ᨆ}ᨆ.success {ᨆbackground-color: #d0ffa3;ᨆ}ᨆ.info {ᨆbackground-color: #a3eaff;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="info">ᨆYou can assign classes and IDs arbitrary names like "abc" or "ttt".ᨆHowever, it is important for you to have good naming schemes.ᨆ</div>ᨆ<div class="warning">ᨆThis div has a class named "warning", you intuitively know it contains warning information.ᨆFor example, "Are you sure you want to delete this itemᨆ"ᨆ</div>ᨆ<div class="success">ᨆA div with a "success" class contains information which tells users they did something successfully.ᨆ</div>ᨆ<div class="info">ᨆGood names help you code better! Instead of constantly referencing, you can just remember simple names.ᨆNames like "warning" and "success" are better than random names like "a" and "b".ᨆ</div>ᨆ</body>ᨆ</html>""",
       '32':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Nested Selector</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #999;ᨆ}ᨆ.container {ᨆbackground: #FFF;ᨆpadding: 10px;ᨆwidth: 510px;ᨆ}ᨆ.info p {ᨆcolor: #20a3bd;ᨆ}ᨆ.info span {ᨆfont-weight: bold;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div class="info">ᨆ<p>Text in here are blue!</p>ᨆ<p>ᨆ<span>And this is bold!</span>ᨆ</p>ᨆ</div>ᨆ<p>But text in here are gray!</p>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '33':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Grouping Classes</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆ.info p, span {ᨆcolor: #2f6fd6;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div class="info">ᨆ<p>This paragraph is blue!</p>ᨆ<span>This span element is also blue!</span>ᨆ</div>ᨆ<p>But this paragraph is not blue.</p>ᨆ<span>This span is blue!</span>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '34':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Applying Multiple Classes</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆ.colored {ᨆcolor: #2f6fd6;ᨆ}ᨆ.bolded {ᨆfont-weight: bold;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div class="colored bolded">ᨆ<p>This paragraph is both blue and bold!</p>ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '35':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Row Class</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ.container div {ᨆpadding: 15px;ᨆ}ᨆ.yellow {ᨆbackground-color: #ffe7a3;ᨆ}ᨆ.green {ᨆbackground-color: #d0ffa3;ᨆ}ᨆ.blue {ᨆbackground-color: #a3eaff;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div class="yellow">ᨆThis is row 1.ᨆ</div>ᨆ<div class="green">ᨆThis is row 2.ᨆ</div>ᨆ<div class="blue">ᨆThis is row 3.ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '36':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Column Class</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ.container div {ᨆpadding: 15px;ᨆwidth: 25%;ᨆdisplay: inline-block;ᨆ}ᨆ.yellow {ᨆbackground-color: #ffe7a3;ᨆ}ᨆ.green {ᨆbackground-color: #d0ffa3;ᨆ}ᨆ.blue {ᨆbackground-color: #a3eaff;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div class="yellow">ᨆThis is column 1.ᨆ</div>ᨆ<div class="green">ᨆThis is column 2.ᨆ</div>ᨆ<div class="blue">ᨆThis is column 3.ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '37':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Row and Column Classes</title>ᨆ<style>ᨆbody {ᨆbackground-color: #ddd;ᨆcolor: #555;ᨆ}ᨆdiv {ᨆmargin-top: 5px;ᨆ}ᨆ.cell {ᨆpadding: 15px;ᨆ}ᨆ.yellow {ᨆbackground-color: #ffe7a3;ᨆ}ᨆ.green {ᨆbackground-color: #d0ffa3;ᨆ}ᨆ.blue {ᨆbackground-color: #a3eaff;ᨆ}ᨆ.column {ᨆdisplay: inline-block;ᨆ}ᨆ.column3 {ᨆwidth: 25%;ᨆ}ᨆ.column2 {ᨆwidth: 40%;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="container">ᨆ<div>ᨆ<div class="cell yellow column column3">ᨆThis is row 1 column 1.ᨆ</div>ᨆ<div class="cell green column column3">ᨆThis is row 1 column 2.ᨆ</div>ᨆ<div class="cell blue column column3">ᨆThis is row 1 column 3.ᨆ</div>ᨆ</div>ᨆ<div class="cell yellow">ᨆThis is row 2 column 1.ᨆ</div>ᨆ<div>ᨆ<div class="cell green column column2">ᨆThis is row 3 column 1.ᨆ</div>ᨆ<div class="cell blue column column2">ᨆThis is row 3 column 2.ᨆ</div>ᨆ</div>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '38':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Navigation Bar</title>ᨆ<style>ᨆbody {ᨆmargin: 0;ᨆfont-family: Arial, sans-serif;ᨆ}ᨆdiv.horizontal ul {ᨆbackground-color: #000000;ᨆlist-style-type: none;ᨆmargin: 0;ᨆpadding: 0;ᨆ}ᨆdiv.horizontal li {ᨆfloat: left;ᨆ}ᨆdiv.horizontal a {ᨆdisplay: block;ᨆ}ᨆdiv.horizontal a:link, div.horizontal a:visited {ᨆcolor: #FFFFFF;ᨆbackground-color: #000000;ᨆtext-align: center;ᨆpadding: 10px 25px;ᨆtext-decoration: none;ᨆ}ᨆdiv.horizontal a:hover, div.horizontal a:active {ᨆbackground-color: #2baeff;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<div class="horizontal">ᨆ<ul>ᨆ<li><a href="#">Home</a></li>ᨆ<li><a href="#">About Me</a></li>ᨆ<li><a href="#">Projects</a></li>ᨆ</ul>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '39':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Portfolio Page</title>ᨆ<style>ᨆh1 {ᨆtext-transform: capitalize;ᨆ}ᨆh2 {ᨆfont-size: 20px;ᨆcolor: #006;ᨆpadding-left: 1em;ᨆbackground: url(https://speedcode.oyohub.com/img/heart.png) no-repeat;ᨆ}ᨆ#aboutme {ᨆlist-style-type: none;ᨆmargin: 0;ᨆpadding-left: 10px;ᨆ}ᨆ#aboutme >li::before {ᨆcontent: "- ";ᨆ}ᨆ#aboutme b {ᨆcolor: #666;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>Welcome to my website!</h1>ᨆ<h2>About Me</h2>ᨆ<div>ᨆ<ul id="aboutme">ᨆ<li><b>Name:</b> Steve</li>ᨆ<li><b>Origin:</b> Minecraft</li>ᨆ<li><b>Occupation:</b> Miner, builder, alchemist, hunter</li>ᨆ<li><b>Hobbies:</b> building, exploring, mining</li>ᨆ</ul>ᨆ</div>ᨆ<h2>My Scratch Project</h2>ᨆ<div>ᨆ<iframe allowtransparency="true" width="485" height="402"ᨆsrc="//scratch.mit.edu/projects/embed/11346139/ᨆautostart=false"ᨆframeborder="0" allowfullscreen></iframe>ᨆ</div>ᨆ<h2>My PythonMini Project</h2>ᨆ<div>ᨆ<iframe width="90%" height="600px"ᨆsrc="https://pythonmini.oyohub.com/file/558edbf0f3c51240cd3c925e"ᨆframeborder="0"></iframe>ᨆ</div>ᨆ</body>ᨆ</html>""",
       '40':"""<!DOCTYPE html>ᨆ<html>ᨆ<head>ᨆ<title>Badge Collection</title>ᨆ<style>ᨆh1 {ᨆwidth: 520px;ᨆtext-align: center;ᨆfont-size: 30px;ᨆ}ᨆ#badge_list {ᨆlist-style-type: none;ᨆmargin: 0;ᨆpadding: 0;ᨆwidth: 520px;ᨆfont-family: "Comic Sans MS", cursive, sans-serif;ᨆ}ᨆ#badge_list li {ᨆfloat: left;ᨆtext-align: center;ᨆwidth: 240px;ᨆmargin-right: 10px;ᨆmargin-bottom: 20px;ᨆ}ᨆ.badge_image {ᨆmax-width: 166px;ᨆ}ᨆ.badge_name {ᨆfont-size: 18px;ᨆcolor: #069;ᨆfont-weight: bold;ᨆborder-top: 1px dotted #CCC;ᨆpadding: 10px;ᨆ}ᨆ.card {ᨆborder: 1px solid #F1F1F1;ᨆborder-radius: .5em;ᨆbox-shadow: 0px 4px 8px 0px #CCC;ᨆ}ᨆ</style>ᨆ</head>ᨆ<body>ᨆ<h1>My Badge Collections</h1>ᨆ<div>ᨆ<ul id="badge_list">ᨆ<li class="card">ᨆ<div>ᨆ<img class="badge_image" src="https://speedcode.oyohub.com/img/maze-star1.png"/>ᨆ</div>ᨆ<div class="badge_name">ᨆ1-Star Maze Runnerᨆ</div>ᨆ</li>ᨆ<li class="card">ᨆ<div>ᨆ<img class="badge_image" src="https://speedcode.oyohub.com/img/python-10wpm.png"/>ᨆ</div>ᨆ<div class="badge_name">ᨆPython 10 WPMᨆ</div>ᨆ</li>ᨆ</ul>ᨆ</div>ᨆ</body>ᨆ</html>"""
   },
 
   'c++': {
       '1': """#include <iostream>ᨆint main() {ᨆstd::cout << "Hello World!" << std::endl;ᨆstd::cout << 123 << std::endl;ᨆstd::cout << "Change to your own string here" << std::endl;ᨆreturn 0;ᨆ}""",
       '2':"""#include <iostream>ᨆint main() {ᨆstd::cout << "Comments in C++" << std::endl;ᨆstd::cout << "Use // to comment single line" << std::endl;ᨆstd::cout << "Use /* ... */ to comment multi lines" << std::endl;ᨆreturn 0;ᨆ}""",
       '3':"""#include <iostream>ᨆint main() {ᨆstd::cout << 123 + 456 << std::endl;ᨆstd::cout << 123 * 456 << std::endl;ᨆstd::cout << 144 / 12 << std::endl;ᨆstd::cout << 12 * 3 + 4 << std::endl;ᨆstd::cout << 12 * (3 + 4) << std::endl;ᨆreturn 0;ᨆ}""",
       '4':"""#include <iostream>ᨆint main() {ᨆint v = 5;ᨆstd::cout << v << std::endl;ᨆv = 6;ᨆstd::cout << v << std::endl;ᨆv = v + 1;ᨆstd::cout << v << std::endl;ᨆint i = 2;ᨆint sum = v + i;ᨆstd::cout << sum << std::endl;ᨆreturn 0;ᨆ}""",
       '5':"""#include <iostream>ᨆint main() {ᨆdouble num1 = 0.05;ᨆdouble num2 = 0.6;ᨆdouble result = num1 + num2;ᨆstd::cout << result << std::endl;ᨆresult = num1 * num2;ᨆstd::cout << result << std::endl;ᨆint i = 3;ᨆresult = i + num1 + num2;ᨆstd::cout << result << std::endl;ᨆreturn 0;ᨆ}""",
       '6':"""#include <iostream>ᨆint main() {ᨆchar c1 = 'n';ᨆchar c2 = 'y';ᨆstd::cout << c1 << c2 << std::endl;ᨆbool b = true;ᨆstd::cout << b << std::endl;ᨆb = 3 > 2;ᨆstd::cout << b << std::endl;ᨆb = 2.3 < 1.4;ᨆstd::cout << b << std::endl;ᨆreturn 0;ᨆ}""",
       '7':"""#include <iostream>ᨆconst double PI = 3.14159;ᨆint main() {ᨆstd::cout << "PI's value is " << PI << std::endl;ᨆdouble radius = 2.5;ᨆstd::cout << "Circumference of a circle with radius "ᨆ<< radius << " is " << 2 * PI * radius << std::endl;ᨆstd::cout << "Area of a circle with radius "ᨆ<< radius << " is " << PI * radius * radius << std::endl;ᨆconst int secondsInOneMinute = 60;ᨆconst int minutesInOneHour = 60;ᨆconst int hoursInOneDay = 24;ᨆstd::cout << "Seconds in one day: "ᨆ<< secondsInOneMinute * minutesInOneHour * hoursInOneDayᨆ<< std::endl;ᨆreturn 0;ᨆ}""",
       '8':"""#include <iostream>ᨆ#include <string>ᨆint main() {ᨆstd::string intro = "My name is Nick";ᨆstd::cout << intro << std::endl;ᨆstd::string food = "I love pizza!";ᨆstd::cout << food << std::endl;ᨆstd::string joinedString = intro + ", " + food;ᨆstd::cout << joinedString << std::endl;ᨆstd::cout << "The above string's length is: "ᨆ<< joinedString.length() << std::endl;ᨆreturn 0;ᨆ}""",
       '9':"""#include <iostream>ᨆ#include <string>ᨆint main() {ᨆstd::string hello = "Hello C++";ᨆint pos = hello.find("ello");ᨆstd::cout << "ello is at position " << pos << std::endl;ᨆpos = hello.find("C++");ᨆstd::cout << "C++ is at position " << pos << std::endl;ᨆstd::string sub = hello.substr(1, 4);ᨆstd::cout << "Substring is: " << sub << std::endl;ᨆhello.insert(1, "ee");ᨆstd::cout << hello << std::endl;ᨆhello.erase(1, 2);ᨆstd::cout << hello << std::endl;ᨆreturn 0;ᨆ}""",
       '10':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆint main() {ᨆcout << "Did you notice now we don't need to use std:: ᨆ" << endl;ᨆcout << "The magic is 'using namespace std;'" << endl;ᨆcout << "Because 'cout' belongs to namespace 'std', "ᨆ<< "we need to use std::cout before to tell the compiler "ᨆ<< "to find cout from the namespace std" << endl;ᨆcout << "Now we explicitly write 'using namespace std' "ᨆ<< "in the beginning, so we don't need the std:: prefix anymore"ᨆ<< endl;ᨆcout << "This works for using string too!" << endl;ᨆstring sayHello = "Hello World";ᨆcout << "String is: " << sayHello << endl;ᨆreturn 0;ᨆ}""",
       '11':"""#include <iostream>ᨆusing namespace std;ᨆint main() {ᨆint x = 5;ᨆif (x > 0) {ᨆcout << "X is a positive number" << endl;ᨆ}ᨆif (x < 0) {ᨆcout << "X is a negative number" << endl;ᨆ}ᨆif (x == 0) {ᨆcout << "X is zero" << endl;ᨆ}ᨆreturn 0;ᨆ}""",
       '12':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆint main() {ᨆstring weather = "Sunny";ᨆif (weather == "Sunny") {ᨆcout << "Let's go on a picnic!" << endl;ᨆ} else if (weather == "Rainy") {ᨆcout << "Let's play game at home" << endl;ᨆ} else {ᨆcout << "We will see ..." << endl;ᨆ}ᨆreturn 0;ᨆ}""",
       '13':"""#include <iostream>ᨆ#include <cstdlib>ᨆ#include <ctime>ᨆusing namespace std;ᨆint main() {ᨆcout << "I am going to throw a dice" << endl;ᨆsrand(time(NULL));ᨆint result = rand() % 6 + 1;ᨆswitch (result) {ᨆcase 1:ᨆcout << "I get 1" << endl;ᨆbreak;ᨆcase 2:ᨆcout << "I get 2" << endl;ᨆbreak;ᨆcase 3:ᨆcout << "I get 3" << endl;ᨆbreak;ᨆcase 4:ᨆcout << "I get 4" << endl;ᨆbreak;ᨆcase 5:ᨆcout << "I get 5" << endl;ᨆbreak;ᨆcase 6:ᨆcout << "I get 6" << endl;ᨆbreak;ᨆdefault:ᨆcout << "Impossible to get " << result << endl;ᨆbreak;ᨆ}ᨆreturn 0;ᨆ}""",
       '14':"""#include <iostream>ᨆusing namespace std;ᨆint main() {ᨆint i = 10;ᨆwhile (i > 0) {ᨆcout << i << " ";ᨆi = i - 1;ᨆ}ᨆi = 10;ᨆwhile (i > 0) {ᨆcout << "I love pizza!" << endl;ᨆi = i - 1;ᨆ}ᨆi = 1;ᨆdo {ᨆcout << "i = " << i << endl;ᨆi = i - 1;ᨆ} while (i > 2);ᨆreturn 0;ᨆ}""",
       '15':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆint main() {ᨆfor (int i = 0; i < 10; i = i + 1) {ᨆcout << i << " ";ᨆ}ᨆcout << endl;ᨆfor (int n = 0, i = 10; n != i; ++n, --i) {ᨆcout << "n = " << n << " i = " << i << endl;ᨆ}ᨆstring s = "Hello!";ᨆfor (char c : s) {ᨆcout << "[" << c << "] ";ᨆ}ᨆcout << endl;ᨆfor (auto c : s) {ᨆcout << "[" << c << "] ";ᨆ}ᨆreturn 0;ᨆ}""",
       '16':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆint main() {ᨆfor (int i = 5; i > 0; i = i - 1) {ᨆif (i == 2) {ᨆcout << "Countdown aborted!";ᨆbreak;ᨆ}ᨆcout << i << " ";ᨆ}ᨆcout << endl;ᨆstring s = "Hello world!";ᨆfor (auto c : s) {ᨆif (c == 'd') {ᨆcout << "Found 'd'!" << endl;ᨆbreak;ᨆ}ᨆ}ᨆfor (int i = 5; i > 0; i = i - 1) {ᨆif (i == 2) {ᨆcout << "[skipped] ";ᨆcontinue;ᨆ}ᨆcout << i << " ";ᨆ}ᨆreturn 0;ᨆ}""",
       '17':"""#include <iostream>ᨆusing namespace std;ᨆvoid countdown(int n) {ᨆfor (int i = n; i > 0; i = i - 1) {ᨆcout << i << " ";ᨆ}ᨆcout << endl;ᨆ}ᨆint main() {ᨆfor (int i = 5; i > 0; i = i - 1) {ᨆcout << i << " ";ᨆ}ᨆcout << endl;ᨆfor (int i = 6; i > 0; i = i - 1) {ᨆcout << i << " ";ᨆ}ᨆcout << endl;ᨆcout << "Using countdown function:" << endl;ᨆcountdown(5);ᨆcountdown(10);ᨆcountdown(16);ᨆcountdown(20);ᨆreturn 0;ᨆ}""",
       '18':"""#include <iostream>ᨆusing namespace std;ᨆconst double PI = 3.14159;ᨆdouble circumference(double radius) {ᨆdouble cir = 2 * PI * radius;ᨆreturn cir;ᨆ}ᨆdouble area(double radius) {ᨆdouble a = PI * radius * radius;ᨆreturn a;ᨆ}ᨆint main() {ᨆdouble radius = 1.5;ᨆcout << "A circle with radius " << radius << endl;ᨆcout << "- Its circumference is " << circumference(radius) << endl;ᨆcout << "- Its area is " << area(radius) << endl;ᨆcout << endl;ᨆradius = 12.4;ᨆcout << "A circle with radius " << radius << endl;ᨆcout << "- Its circumference is " << circumference(radius) << endl;ᨆcout << "- Its area is " << area(radius) << endl;ᨆreturn 0;ᨆ}""",
       '19':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆint add(int a, int b) {ᨆreturn a + b;ᨆ}ᨆdouble add(double a, double b) {ᨆreturn a + b;ᨆ}ᨆdouble add(double a, double b, double c) {ᨆreturn a + b + c;ᨆ}ᨆstring add(string a, string b) {ᨆreturn a + " " + b;ᨆ}ᨆint main() {ᨆcout << add(1, 2) << endl;ᨆcout << add(1.4, 36.2) << endl;ᨆcout << add(1.2, 3.4, 1.414) << endl;ᨆcout << add("Hello", "World") << endl;ᨆreturn 0;ᨆ}""",
       '20':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆtemplate <typename T>ᨆT add(T a, T b) {ᨆT result;ᨆresult = a + b;ᨆreturn result;ᨆ}ᨆint main() {ᨆint x1 = add<int>(10, 20);ᨆcout << x1 << endl;ᨆdouble x2 = add<double>(1.2, 2.3);ᨆcout << x2 << endl;ᨆstring x3 = add<string>("Hello ", "World");ᨆcout << x3 << endl;ᨆreturn 0;ᨆ}""",
       '21':"""#include <iostream>ᨆusing namespace std;ᨆvoid countdown(int num) {ᨆcout << num << " ";ᨆif (num > 0) {ᨆcountdown(num-1);ᨆ}ᨆ}ᨆint fibonacci(int num) {ᨆif (num == 0) {ᨆreturn 0;ᨆ}ᨆif (num == 1) {ᨆreturn 1;ᨆ}ᨆreturn fibonacci(num-2) + fibonacci(num-1);ᨆ}ᨆint main() {ᨆcout << "Countdown:" << endl;ᨆcountdown(10);ᨆcout << endl;ᨆcout << "Fibonacci:" << endl;ᨆcout << "7th number of Fibonacci: " << fibonacci(7) << endl;ᨆreturn 0;ᨆ}""",
       '22':"""#include <iostream>ᨆusing namespace std;ᨆint main() {ᨆint i = 5, j = 10;ᨆint *p1 = &i;ᨆint *p2 = &j;ᨆcout << "i: " << i << " address: " << p1 << endl;ᨆcout << "j: " << j << " address: " << p2 << endl;ᨆcout << "*p1: " << *p1 << endl;ᨆ*p1 = 20;ᨆcout << "Now *p1 is: " << *p1 << " and i is: " << i << endl;ᨆint arr[] = {10, 20, 30};ᨆint length = sizeof(arr) / sizeof(arr[0]);ᨆcout << "Use [] indexing to print all numbers:" << endl;ᨆfor (int i = 0; i < length; i++) {ᨆcout << arr[i] << " ";ᨆ}ᨆcout << endl;ᨆcout << "Use pointer to print all numbers:" << endl;ᨆint *start = arr;ᨆfor (int i = 0; i < length; i++) {ᨆcout << *(start + i) << " ";ᨆ}ᨆcout << endl;ᨆreturn 0;ᨆ}""",
       '23':"""#include <iostream>ᨆ#include <cstdlib>ᨆ#include <ctime>ᨆusing namespace std;ᨆint main() {ᨆint *count = new int;ᨆ*count = 10;ᨆcout << *count << endl;ᨆsrand(time(NULL));ᨆint *arr = new int[*count];ᨆfor (int i = 0; i < *count; i++) {ᨆint num = rand() % 100;ᨆarr[i] = num;ᨆ}ᨆfor (int i = 0; i < *count; i++) {ᨆcout << arr[i] << " ";ᨆ}ᨆcout << endl;ᨆdelete count;ᨆdelete [] arr;ᨆreturn 0;ᨆ}""",
       '24':"""#include <iostream>ᨆusing namespace std;ᨆconst double PI = 3.14159;ᨆclass Circle {ᨆpublic:ᨆCircle(double r);ᨆdouble circumference();ᨆdouble area();ᨆprivate:ᨆdouble radius;ᨆ};ᨆCircle::Circle(double r) {ᨆthis->radius = r;ᨆ}ᨆdouble Circle::circumference() {ᨆreturn 2 * PI * this->radius;ᨆ}ᨆdouble Circle::area() {ᨆreturn PI * this->radius * this->radius;ᨆ}ᨆint main() {ᨆCircle c1(1.2);ᨆcout << "Circle1 (radius 1.2) circumference is: " << c1.circumference()ᨆ<< " area is: " << c1.area() << endl;ᨆCircle c2(2.5);ᨆcout << "Circle2 (radius 2.5) circumference is: " << c2.circumference()ᨆ<< " area is: " << c2.area() << endl;ᨆreturn 0;ᨆ}""",
       '25':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆclass Car {ᨆpublic:ᨆCar(string _maker, string _type, double _mpg);ᨆdouble canRunMilesWithGallon(double _gallon);ᨆvoid desc();ᨆprivate:ᨆstring maker;ᨆstring type;ᨆdouble mpg;ᨆ};ᨆCar::Car(string _maker, string _type, double _mpg) {ᨆthis->maker = _maker;ᨆthis->type = _type;ᨆthis->mpg = _mpg;ᨆ}ᨆdouble Car::canRunMilesWithGallon(double _gallon) {ᨆreturn _gallon * this->mpg;ᨆ}ᨆvoid Car::desc() {ᨆcout << "Maker: " << this->maker << endl;ᨆcout << "Type: " << this->type << endl;ᨆcout << "MPG: " << this->mpg << endl;ᨆ}ᨆint main() {ᨆint gallons = 2;ᨆCar car1("Ford", "Sedan", 30);ᨆcout << "car 1:" << endl;ᨆcar1.desc();ᨆcout << "With " << gallons << " gallon gas, car1 can run "ᨆ<< car1.canRunMilesWithGallon(gallons) << " miles" << endl;ᨆcout << endl;ᨆCar car2("Audi", "SUV", 26);ᨆcout << "car 2:" << endl;ᨆcar2.desc();ᨆcout << "With " << gallons << " gallon gas, car2 can run "ᨆ<< car2.canRunMilesWithGallon(gallons) << " miles" << endl;ᨆreturn 0;ᨆ}""",
       '26':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆclass Person {ᨆpublic:ᨆPerson(string _name, int _birthyear) {ᨆthis->name = _name;ᨆthis->birthyear = _birthyear;ᨆ}ᨆvoid print() {ᨆcout << "Name: " << this->name << endl;ᨆcout << "Year of birth: " << this->birthyear << endl;ᨆ}ᨆprotected:ᨆstring name;ᨆint birthyear;ᨆ};ᨆclass Student: public Person {ᨆpublic:ᨆStudent(string _name, int _birthyear, string _school):ᨆPerson(_name, _birthyear) {ᨆthis->school = _school;ᨆ}ᨆvoid print() {ᨆPerson::print();ᨆcout << "School: " << this->school << endl;ᨆ}ᨆprotected:ᨆstring school;ᨆ};ᨆint main() {ᨆStudent st("Larry", 1994, "Middle Island High School");ᨆst.print();ᨆreturn 0;ᨆ}""",
       '27':"""#include <iostream>ᨆusing namespace std;ᨆclass Person {ᨆpublic:ᨆPerson(string _name, int _birthyear) {ᨆthis->name = _name;ᨆthis->birthyear = _birthyear;ᨆ}ᨆvoid print() {ᨆcout << "Name: " << this->name << endl;ᨆcout << "Year of birth: " << this->birthyear << endl;ᨆ}ᨆprotected:ᨆstring name;ᨆint birthyear;ᨆ};ᨆclass Student: public Person {ᨆpublic:ᨆStudent(string _name, int _birthyear, string _school):ᨆPerson(_name, _birthyear) {ᨆthis->school = _school;ᨆ}ᨆvoid print() {ᨆPerson::print();ᨆcout << "School: " << this->school << endl;ᨆ}ᨆprotected:ᨆstring school;ᨆ};ᨆclass CollegeStudent: public Student {ᨆpublic:ᨆCollegeStudent(string _name, int _birthyear, string _school,ᨆstring _major):Student(_name, _birthyear, _school) {ᨆthis->major = _major;ᨆ}ᨆvoid print() {ᨆStudent::print();ᨆcout << "Major: " << this->major << endl;ᨆ}ᨆprotected:ᨆstring major;ᨆ};ᨆint main() {ᨆCollegeStudent ss("Bob", 1990, "MIT", "Computer Science");ᨆss.print();ᨆreturn 0;ᨆ}""",
       '28':"""#include <iostream>ᨆusing namespace std;ᨆclass Coordinate {ᨆpublic:ᨆCoordinate(int _x, int _y):x(_x), y(_y) {}ᨆCoordinate operator +(const Coordinate& other) {ᨆint xx = other.x + this->x;ᨆint yy = other.y + this->y;ᨆreturn Coordinate(xx, yy);ᨆ}ᨆvoid print() {ᨆcout << "(" << x << ", " << y << ")" << endl;ᨆ}ᨆprotected:ᨆint x;ᨆint y;ᨆ};ᨆint main() {ᨆCoordinate dot1(1, 2);ᨆcout << "dot1: ";ᨆdot1.print();ᨆCoordinate dot2(3, 4);ᨆcout << "dot2: ";ᨆdot2.print();ᨆCoordinate dot3 = dot1 + dot2;ᨆcout << "dot3: ";ᨆdot3.print();ᨆreturn 0;ᨆ}""",
       '29':"""#include <iostream>ᨆusing namespace std;ᨆclass Square {ᨆpublic:ᨆSquare():length(0) {};ᨆSquare(double _length):length(_length) {}ᨆdouble area();ᨆfriend Square duplicate(const Square& other);ᨆprivate:ᨆdouble length;ᨆ};ᨆdouble Square::area() {ᨆreturn this->length * this->length;ᨆ}ᨆSquare duplicate(const Square& other) {ᨆSquare s;ᨆs.length = other.length;ᨆreturn s;ᨆ}ᨆint main() {ᨆSquare s1(4);ᨆSquare s2 = duplicate(s1);ᨆcout << "Square s2 's area is: " << s2.area() << endl;ᨆSquare s3 = duplicate(s2);ᨆcout << "Square s3 's area is: " << s3.area() << endl;ᨆreturn 0;ᨆ}""",
       '30':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆclass Student {ᨆfriend class Printer;ᨆpublic:ᨆStudent(string _id, string _name, string _school):ᨆid(_id), name(_name), school(_school) {}ᨆprivate:ᨆstring id;ᨆstring name;ᨆstring school;ᨆ};ᨆclass Printer {ᨆpublic:ᨆvoid print(Student &s) {ᨆcout << "Student Information" << endl;ᨆcout << "===================" << endl;ᨆcout << "ID:\\t" << s.id << endl;ᨆcout << "Name:\\t" << s.name << endl;ᨆcout << "School:\\t" << s.school << endl;ᨆ}ᨆ};ᨆint main() {ᨆStudent s1("108809", "Nick", "Long Island High School");ᨆStudent s2("109910", "Jack", "Montauk Elementary School");ᨆPrinter myPrinter;ᨆmyPrinter.print(s1);ᨆcout << endl;ᨆmyPrinter.print(s2);ᨆreturn 0;ᨆ}""",
       '31':"""#include <iostream>ᨆ#include <string>ᨆ#include <vector>ᨆusing namespace std;ᨆclass Animal {ᨆpublic:ᨆAnimal() {}ᨆAnimal(string _name):name(_name) {}ᨆstring getName() const {return this->name;}ᨆvirtual void speak() = 0;ᨆprotected:ᨆstring name;ᨆ};ᨆclass Cat:public Animal {ᨆpublic:ᨆCat(string _name):Animal(_name) {}ᨆvoid speak() {ᨆcout << "meow meow ᨆ" << endl;ᨆ}ᨆ};ᨆclass Dog:public Animal {ᨆpublic:ᨆDog(string _name):Animal(_name) {}ᨆvoid speak() {ᨆcout << "woof woof ᨆ" << endl;ᨆ}ᨆ};ᨆint main() {ᨆvector<Animal*> animals;ᨆanimals.push_back(new Cat("Garfield"));ᨆanimals.push_back(new Dog("Pluto"));ᨆfor (int i = 0; i < animals.size(); i++) {ᨆcout << animals[i]->getName() << ": ";ᨆanimals[i]->speak();ᨆ}ᨆfor (int i = 0; i < animals.size(); i++) {ᨆdelete animals[i];ᨆ}ᨆreturn 0;ᨆ}""",
       '32':"""#include <iostream>ᨆ#include <string>ᨆusing namespace std;ᨆtemplate <typename Type1, typename Type2>ᨆclass Pair {ᨆpublic:ᨆPair(Type1 t1, Type2 t2) {ᨆthis->first = t1;ᨆthis->second = t2;ᨆ}ᨆvoid setFirst(Type1 t1) {ᨆthis->first = t1;ᨆ}ᨆvoid setSecond(Type2 t2) {ᨆthis->second = t2;ᨆ}ᨆType1 getFirst() const {ᨆreturn this->first;ᨆ}ᨆType2 getSecond() const {ᨆreturn this->second;ᨆ}ᨆprivate:ᨆType1 first;ᨆType2 second;ᨆ};ᨆint main() {ᨆPair<double, double> point(2, 2.5);ᨆcout << "Point coordinate: " << "(" << point.getFirst() << ", "ᨆ<< point.getSecond() << ")" << endl;ᨆPair<string, string> name("James", "Smith");ᨆcout << "Name: " << name.getFirst() << " "ᨆ<< name.getSecond() << endl;ᨆPair<string, double> item("Apple Juice", 2.48);ᨆcout << "Beverage: " << item.getFirst() << " $"ᨆ<< item.getSecond() << endl;ᨆreturn 0;ᨆ}""",
       '33':"""#include <iostream>ᨆ#include <vector>ᨆ#include <algorithm>ᨆ#include <iterator>ᨆ#include <ctime>ᨆ#include <cstdlib>ᨆusing namespace std;ᨆint main() {ᨆvector<int> numbers;ᨆsrand(time(NULL));ᨆfor (int i = 0; i < 10; i++) {ᨆnumbers.push_back(rand() % 100);ᨆ}ᨆint count = numbers.size();ᨆcout << "We have " << count << " numbers:" << endl;ᨆfor (int i = 0; i < count; i++) {ᨆcout << numbers[i] << " ";ᨆ}ᨆcout << endl;ᨆcout << "1st number: " << numbers.front() << endl;ᨆcout << "last number: " << numbers.back() << endl;ᨆauto iter = numbers.begin();ᨆnumbers.insert(iter+1, 101);ᨆcout << "After inserting 101:" << endl;ᨆcopy(numbers.begin(), numbers.end(), ostream_iterator<int>(cout, " "));ᨆcout << endl;ᨆnumbers.erase(iter+2);ᨆcout << "After removing 3rd element:" << endl;ᨆcopy(numbers.begin(), numbers.end(), ostream_iterator<int>(cout, " "));ᨆreturn 0;ᨆ}""",
       '34':"""#include <iostream>ᨆ#include <vector>ᨆusing namespace std;ᨆvoid print_vector(vector<vector<int>>& vec) {ᨆfor (int i = 0; i < vec.size(); i++) {ᨆfor (int j = 0; j < vec[i].size(); j++) {ᨆcout << vec[i][j] << " ";ᨆ}ᨆcout << endl;ᨆ}ᨆ}ᨆint main() {ᨆint rows = 4, cols = 5;ᨆvector<vector<int>> vec(rows, vector<int>(cols));ᨆint start = 10;ᨆfor (int i = 0; i < vec.size(); i++) {ᨆfor (int j = 0; j < vec[i].size(); j++) {ᨆvec[i][j] = start;ᨆstart = start + 1;ᨆ}ᨆ}ᨆprint_vector(vec);ᨆvec[1][3] = 99;ᨆcout << endl;ᨆprint_vector(vec);ᨆcout << endl;ᨆfor (int i = 0; i < vec.size(); i++) {ᨆcout << vec[i].back() << endl;ᨆ}ᨆcout << endl;ᨆfor (int i = 0; i < vec.size(); i++) {ᨆvec[i].push_back(100 + i);ᨆ}ᨆprint_vector(vec);ᨆreturn 0;ᨆ}""",
       '35':"""#include <iostream>ᨆ#include <list>ᨆ#include <ctime>ᨆ#include <cstdlib>ᨆusing namespace std;ᨆvoid print_list(list<int>& lst) {ᨆauto iter = lst.begin();ᨆfor (iter; iter != lst.end(); iter++) {ᨆcout << *iter << " ";ᨆ}ᨆ}ᨆint main() {ᨆlist<int> numbers;ᨆsrand(time(NULL));ᨆfor (int i = 0; i < 10; i++) {ᨆnumbers.push_back(rand() % 100);ᨆ}ᨆint count = numbers.size();ᨆcout << "We have " << count << " numbers:" << endl;ᨆprint_list(numbers);ᨆcout << endl;ᨆcout << "1st number: " << numbers.front() << endl;ᨆcout << "last number: " << numbers.back() << endl;ᨆauto iter = numbers.begin();ᨆiter++;ᨆiter = numbers.insert(iter, 101);ᨆcout << "After inserting 101:" << endl;ᨆprint_list(numbers);ᨆcout << endl;ᨆiter++;ᨆnumbers.erase(iter);ᨆcout << "After removing the number after 101:" << endl;ᨆprint_list(numbers);ᨆreturn 0;ᨆ}""",
       '36':"""#include <iostream>ᨆ#include <stack>ᨆ#include <queue>ᨆusing namespace std;ᨆint main() {ᨆstack<int> mystack;ᨆfor (int i = 0; i < 5; i++) {ᨆmystack.push(i);ᨆ}ᨆcout << "mystack has " << mystack.size()ᨆ<< " elements, and top element is: " << mystack.top() << endl;ᨆmystack.pop();ᨆcout << "Popped the last element" << endl;ᨆcout << "mystack has " << mystack.size()ᨆ<< " elements, and top element is: " << mystack.top() << endl;ᨆcout << endl;ᨆqueue<int> myqueue;ᨆfor (int i = 10; i < 15; i++) {ᨆmyqueue.push(i);ᨆ}ᨆcout << "myqueue has " << myqueue.size()ᨆ<< " elements, and the front element is: " << myqueue.front() << endl;ᨆmyqueue.pop();ᨆcout << "Poped the front element" << endl;ᨆcout << "myqueue has " << myqueue.size()ᨆ<< " elements, and front element is: " << myqueue.front() << endl;ᨆreturn 0;ᨆ}""",
       '37':"""#include <iostream>ᨆ#include <map>ᨆusing namespace std;ᨆint main() {ᨆcout << "Define a map, the key is the student-name, the value is the student-score" << endl;ᨆmap<string, int> studentScore;ᨆstudentScore["Aaron"] = 87;ᨆstudentScore["Alice"] = 89;ᨆstudentScore["Bob"] = 85;ᨆstudentScore["Henry"] = 70;ᨆstudentScore["Ivy"] = 92;ᨆstudentScore["Jack"] = 65;ᨆstring name = "Henry";ᨆcout << "Looking up score for " << name << endl;ᨆmap<string, int>::iterator iter;ᨆiter = studentScore.find(name);ᨆif (iter == studentScore.end()) {ᨆcout << "- Can't find score for " << name;ᨆ} else {ᨆcout << "- " << name << " got score: " << iter->second << endl;ᨆ}ᨆname = "Kuri";ᨆcout << "Looking up score for " << name << endl;ᨆiter = studentScore.find(name);ᨆif (iter == studentScore.end()) {ᨆcout << "- Can't find score for " << name;ᨆ} else {ᨆcout << "- " << name << " got score: " << iter->second << endl;ᨆ}ᨆreturn 0;ᨆ}""",
       '38':"""#include <iostream>ᨆ#include <vector>ᨆ#include <ctime>ᨆ#include <cstdlib>ᨆusing namespace std;ᨆint main() {ᨆvector<int> numbers;ᨆsrand(time(NULL));ᨆfor (int i = 0; i < 10; i++) {ᨆint number = rand() % 100;ᨆnumbers.push_back(number);ᨆ}ᨆfor (int i = 0; i < numbers.size(); i++) {ᨆcout << numbers[i] << " ";ᨆ}ᨆcout << endl;ᨆint max = 0, min = 100;ᨆfor (int i = 0; i < numbers.size(); i++) {ᨆint number = numbers[i];ᨆif (max < number) {ᨆmax = number;ᨆ}ᨆif (min > number) {ᨆmin = number;ᨆ}ᨆ}ᨆcout << "Max number is: " << max << endl;ᨆcout << "Min number is: " << min << endl;ᨆreturn 0;ᨆ}""",
       '39':"""#include <iostream>ᨆ#include <vector>ᨆ#include <ctime>ᨆ#include <cstdlib>ᨆusing namespace std;ᨆint main() {ᨆvector<int> numbers;ᨆsrand(time(NULL));ᨆfor (int i = 0; i < 10; i++) {ᨆint number = rand() % 100;ᨆnumbers.push_back(number);ᨆ}ᨆcout << "Before sorting" << endl;ᨆfor (int i = 0; i < numbers.size(); i++) {ᨆcout << numbers[i] << " ";ᨆ}ᨆcout << endl;ᨆfor (int i = 0; i < numbers.size(); i++) {ᨆint minIndex = i;ᨆfor (int j = i; j < numbers.size(); j++) {ᨆif (numbers[minIndex] > numbers[j]) {ᨆminIndex = j;ᨆ}ᨆ}ᨆif (minIndex != i) {ᨆint temp = numbers[minIndex];ᨆnumbers[minIndex] = numbers[i];ᨆnumbers[i] = temp;ᨆ}ᨆ}ᨆcout << "After sorting" << endl;ᨆfor (int i = 0; i < numbers.size(); i++) {ᨆcout << numbers[i] << " ";ᨆ}ᨆreturn 0;ᨆ}""",
       '40':"""#include <iostream>ᨆ#include <vector>ᨆ#include <algorithm>ᨆ#include <iterator>ᨆ#include <ctime>ᨆ#include <cstdlib>ᨆusing namespace std;ᨆint main() {ᨆvector<int> numbers;ᨆsrand(time(NULL));ᨆfor (int i = 0; i < 10; i++) {ᨆint number = rand() % 100;ᨆnumbers.push_back(number);ᨆ}ᨆcout << "Before sorting:" << endl;ᨆcopy(numbers.begin(), numbers.end(), ostream_iterator<int>(cout, " "));ᨆbool swapped = false;ᨆdo {ᨆswapped = false;ᨆfor (int i = 1; i < numbers.size(); i++) {ᨆif (numbers[i-1] > numbers[i]) {ᨆint temp = numbers[i];ᨆnumbers[i] = numbers[i-1];ᨆnumbers[i-1] = temp;ᨆswapped = true;ᨆ}ᨆ}ᨆ} while (swapped);ᨆcout << endl;ᨆcout << "After sorting:" << endl;ᨆcopy(numbers.begin(), numbers.end(), ostream_iterator<int>(cout, " "));ᨆreturn 0;ᨆ}"""
   },
 
   'java': {
       '1':"""public class PrintStatement {ᨆpublic static void main(String[] args) {ᨆSystem.out.println("Hello World");ᨆSystem.out.println("Good morning!");ᨆSystem.out.print("The T-rex has the PIE!");ᨆ}ᨆ}""",
       '2':"""public class DataTypes {ᨆpublic static void main(String[] args) {ᨆint a = 10;ᨆdouble b = 2.33;ᨆfloat c = 3.55f;ᨆchar d = 't';ᨆboolean e = true;ᨆSystem.out.println(a);ᨆSystem.out.println(b);ᨆSystem.out.println(c);ᨆSystem.out.println(d);ᨆSystem.out.println(e);ᨆ}ᨆ}""",
       '3':"""public class Casting {ᨆpublic static void main(String[] args) {ᨆint a = 10;ᨆdouble b = 2.33;ᨆfloat c = 3.55f;ᨆint d = (int)b;ᨆSystem.out.println(d);ᨆdouble e = (double)a;ᨆSystem.out.println(e);ᨆ}ᨆ}""",
       '4':"""public class Calculator {ᨆpublic static void main(String[] args) {ᨆint a = 10;ᨆint b = 5;ᨆSystem.out.println(a + b);ᨆSystem.out.println(a - b);ᨆSystem.out.println(a * b);ᨆSystem.out.println(a / b);ᨆSystem.out.println(a + a / b);ᨆ}ᨆ}""",
       '5':"""public class IncDecDemo {ᨆpublic static void main(String[] args) {ᨆint a = 10;ᨆint b = a++;ᨆint c = ++a;ᨆint d = a--;ᨆint e = --a;ᨆSystem.out.println(a);ᨆSystem.out.println(b);ᨆSystem.out.println(c);ᨆSystem.out.println(d);ᨆSystem.out.println(e);ᨆ}ᨆ}""",
       '6':"""public class ArraysDemo {ᨆpublic static void main(String[] args) {ᨆint[] arr = new int[5];ᨆarr[0] = 10;ᨆarr[1] = 11;ᨆarr[2] = 12;ᨆarr[3] = 14;ᨆarr[4] = 15;ᨆSystem.out.println(arr[0]);ᨆSystem.out.println(arr[1]);ᨆSystem.out.println(arr[2]);ᨆSystem.out.println(arr[3]);ᨆSystem.out.println(arr[4]);ᨆ}ᨆ}""",
       '7':"""public class ConditionsDemo {ᨆpublic static void main(String[] args) {ᨆint a = 3;ᨆint b = 4;ᨆboolean c = (a != b);ᨆif (a < b) {ᨆSystem.out.println("A is smaller!");ᨆ}ᨆelse if (a > b) {ᨆSystem.out.println("B is smaller!");ᨆ}ᨆelse {ᨆSystem.out.println("A and B are equal!");ᨆ}ᨆ}ᨆ}""",
       '8':"""public class AndOr {ᨆpublic static void main(String[] args) {ᨆint a = 3;ᨆint b = 4;ᨆint c = 4;ᨆboolean d = (a < b && a < c);ᨆboolean e = (b >= c || b < a);ᨆSystem.out.println(d);ᨆSystem.out.println(e);ᨆ}ᨆ}""",
       '9':"""public class LeapYear {ᨆpublic static void main(String[] args) {ᨆint year = 2104;ᨆboolean c1 = (year % 4 == 0);ᨆboolean c2 = (year % 100 != 0);ᨆboolean c3 = (year % 100 == 0 && year % 400 == 0);ᨆif (c1 && (c2 || c3)) {ᨆSystem.out.println(year + " is a leap year");ᨆ}ᨆelse {ᨆSystem.out.println(year + " is not a leap year");ᨆ}ᨆ}ᨆ}""",
       '10':"""""",
       '11':"""""",
       '12':"""""",
       '13':"""""",
       '14':"""""",
       '15':"""""",
       '16':"""""",
       '17':"""""",
       '18':"""""",
       '19':"""""",
       '20':"""""",
       '21':"""""",
       '22':"""""",
       '23':"""""",
       '24':"""""",
       '25':"""""",
       '26':"""""",
       '27':"""""",
       '28':"""""",
       '29':"""""",
       '30':"""""",
       '31':"""""",
       '32':"""""",
       '33':"""""",
       '34':"""""",
       '35':"""""",
       '36':"""""",
       '37':"""""",
       '38':"""""",
       '39':"""""",
       '40':""""""
   }
}